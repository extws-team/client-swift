//
//  WebSocketClient.swift
//  ExtWSClient
//
//  Created by d.kotina on 19.04.2025.
//

import Foundation

/// –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
public final class WebSocketClient {

    // MARK: - Constants

    private enum Constants {
        static let timeout: TimeInterval = 5
        static let maxReconnectDelay: TimeInterval = 30
        static let initialReconnectDelayBase: Double = 2.0
        static let idleTimeout: TimeInterval = 60
        static let maxConcurrentOperationCount: Int =  1
        static let nanosecondsPerSecond: Double = 1_000_000_000
        static let unauthorizedStatusCode = 401
        static let webSocketRequestLog =
                """
                [WebSocketClient] üõ†Ô∏è WebSocket Request:
                - URL: %@
                - Headers: %@
                """
    }

    // MARK: - Public properties

    public let url: URL                        // URL —Å–µ—Ä–≤–µ—Ä–∞ WebSocket
    public var isConnected: Bool {             // –§–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        get async { await state.isConnected }
    }

    // MARK: - Event Handlers

    public var beforeConnect: ((URLRequest) -> URLRequest)?       // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    public var onUpgradeError: ((HTTPURLResponse) -> Void)?       // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    public var onConnectionStatusChanged: ((Bool) -> Void)?       // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    public var onHTTPResponse: ((HTTPURLResponse) -> Void)?       // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –æ—Ç–≤–µ—Ç–æ–≤

    // MARK: - Private properties

    private let payloadSerializer: PayloadSerializerProtocol = PayloadSerializer()  // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    private let maxReconnectDelay: TimeInterval = Constants.maxReconnectDelay       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private let state = WebSocketState()                                            // –°–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private let eventEmitter = EventEmitter()                                       // –≠–º–∏—Ç—Ç–µ—Ä —Å–æ–±—ã—Ç–∏–π
    private var webSocketTask: WebSocketTaskProtocol?                               // –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ WebSocket
    private var pingTimer: Timer?                                                   // –¢–∞–π–º–µ—Ä –¥–ª—è ping-—Å–æ–æ–±—â–µ–Ω–∏–π
    private var pongTimer: Timer?                                                   // –¢–∞–π–º–µ—Ä –¥–ª—è pong-—Å–æ–æ–±—â–µ–Ω–∏–π
    private let delegate = WebSocketTaskDelegate()                                  // –î–µ–ª–µ–≥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    private let session: URLSessionProtocol                                         // –°–µ—Å—Å–∏—è
    private var idleTimeout: TimeInterval = Constants.idleTimeout                   // –¢–∞–π–º–∞—É—Ç
    private let logger: LoggerProtocol = Logger()                                   // –õ–æ–≥–≥–µ—Ä

    // MARK: - Lifecycle

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    /// - Parameters:
    ///   - url: URL —Å–µ—Ä–≤–µ—Ä–∞ WebSocket
    ///   - session: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è URLSession
    public init(
        url: URL,
        session: URLSessionProtocol? = nil
    ) {
        self.url = url

        if let session = session {
            self.session = session
        } else {
            let dispatchQueue = DispatchQueue(label: Ln.delegateQueueName)
            let operationQueue = OperationQueue()
            operationQueue.underlyingQueue = dispatchQueue
            operationQueue.maxConcurrentOperationCount = Constants.maxConcurrentOperationCount

            self.session = SessionWrapper(
                configuration: .default,
                delegate: delegate,
                delegateQueue: operationQueue
            )
        }
    }

    deinit {
        disconnectSync()
    }

    // MARK: - Connection Management

    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket —Å–µ—Ä–≤–µ—Ä–æ–º
    public func connect() async {
        guard !(await state.isConnected) else {
            return
        }

        await MainActor.run {
            var request = URLRequest(url: url)

            if let beforeConnect = beforeConnect {
                request = beforeConnect(request)
            }

            logger.log(
                String(
                    format: Constants.webSocketRequestLog,
                    request.url?.absoluteString ?? Ln.emptyString,
                    request.allHTTPHeaderFields ?? [:]),
                error: false)

            webSocketTask = session.webSocketTask(with: request)
            webSocketTask?.resume()
            listen()
        }

        await state.updateConnectionStatus(true)
        onConnectionStatusChanged?(true)
        eventEmitter.emit(Ln.connectEvent, data: Data())

        Task {
            await flushQueue()
        }
    }

    /// –†–∞–∑—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    public func disconnect() async {
        await MainActor.run {
            pingTimer?.invalidate()
            pongTimer?.invalidate()
            webSocketTask?.cancel(with: .goingAway, reason: nil)
            webSocketTask = nil
        }

        await state.updateConnectionStatus(false)
        eventEmitter.emit(Ln.disconnectEvent, data: Data())
    }

    // MARK: - Message Handling

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    /// - Parameters:
    ///   - type: –¢–∏–ø –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    ///   - event: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ///   - data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    public func send<T: PayloadData>(type: PayloadType, event: String? = nil, data: T?) {
        Task {
            do {
                let message = try payloadSerializer.build(type: type, event: event, data: data)

                if await state.isConnected, webSocketTask != nil {
                    try await sendInternal(data: message)
                } else {
                    logger.log("[WebSocketClient send] Queuing message because not connected", error: true)
                    await state.enqueue(data: message)
                }

            } catch {
                logger.log("[WebSocketClient send] Failed to build message: \(error)", error: true)
            }
        }
    }

    /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    /// - Parameters:
    ///   - event: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    ///   - callback: –ö–æ–ª–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    public func on(_ event: String, callback: @escaping (Data) -> Void) {
        eventEmitter.on(event, callback: callback)
    }

    // MARK: - Private methods

    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    private func sendInternal(data: Data) async throws {
        guard let task = webSocketTask else {
            logger.log("[WebSocketClient sendInternal] webSocketTask is nil", error: true)
            throw WebSocketError.connectionClosed
        }

        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Void, Error>) in
            task.send(.data(data)) { [weak self] error in
                if let error = error {
                    self?.logger.log("[WebSocketClient sendInternal] Send failed: \(error)", error: true)
                    self?.reconnect()
                    continuation.resume(throwing: WebSocketError.sendFailed(error))
                } else {
                    continuation.resume()
                }
            }
        }
    }

    /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    private func disconnectSync() {
        pingTimer?.invalidate()
        webSocketTask?.cancel(with: .goingAway, reason: nil)
        webSocketTask = nil
        onConnectionStatusChanged?(false)
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping-—Å–æ–æ–±—â–µ–Ω–∏–µ
    private func sendPing() {
        webSocketTask?.sendPing { [weak self] error in
            if let error = error {
                self?.logger.log("[WebSocketClient sendPing] error: \(error)", error: true)
                self?.reconnect()
            } else {
            }
        }
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç pong-—Å–æ–æ–±—â–µ–Ω–∏–µ
    private func sendPong() {
        do {
            let pongData = try payloadSerializer.build(
                type: .pong,
                event: nil,
                data: EmptyPayload?.none
            )

            webSocketTask?.send(
                .data(pongData),
                completionHandler: { [weak self] error in
                    if let error = error {
                        self?.logger.log("[WebSocketClient sendPong] error: \(error)", error: true)
                        self?.reconnect()
                    }
                }
            )
        } catch {
            logger.log("Failed to create pong: \(error)", error: true)
        }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ping-—Å–æ–æ–±—â–µ–Ω–∏–π
    private func startPingTimer() {
        pingTimer?.invalidate()
        pingTimer = Timer.scheduledTimer(
            withTimeInterval: idleTimeout - Constants.timeout,
            repeats: true) { [weak self] _ in
            self?.sendPing()
            self?.startPongTimer()
        }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è pong-–æ—Ç–≤–µ—Ç–∞
    private func startPongTimer() {
        pongTimer?.invalidate()
        pongTimer = Timer.scheduledTimer(
            withTimeInterval: Constants.timeout,
            repeats: false
        ) { [weak self] _ in
            self?.reconnect()
        }
    }

    /// –û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è pong-–æ—Ç–≤–µ—Ç–∞
    private func cancelPongTimer() {
        pongTimer?.invalidate()
        pongTimer = nil
    }

    /// –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    private func listen() {
        webSocketTask?.receive { [weak self] result in
            guard let self = self else { return }

            if let task = self.webSocketTask,
               let httpResponse = self.getHTTPResponse(for: task) {
                self.onHTTPResponse?(httpResponse)
            }
            switch result {
            case .success(.data(let data)):
                self.handleMessage(data)
                self.listen()
            case .success(.string(let text)):
                if let data = text.data(using: .utf8) {
                    self.handleMessage(data)
                }
                self.listen()
            case .success:
                self.listen()
            case .failure:
                if let task = self.webSocketTask,
                   let httpResponse = self.getHTTPResponse(for: task),
                   httpResponse.statusCode == Constants.unauthorizedStatusCode {
                    self.onUpgradeError?(httpResponse)
                } else {
                    self.reconnect()
                }
            }
        }
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    private func handleMessage(_ data: Data) {
        cancelPongTimer()

        do {
            let (type, _, payloadData) = try payloadSerializer.parseHeader(from: data)

            switch type {
                case .ping:
                    sendPong()
                case .timeout:
                    let initData = try payloadSerializer.decode(InitData.self, from: payloadData)
                handleTimeoutMessage(initData)
                case .message:
                    eventEmitter.emit(Ln.messageEvent, data: data)
                case .pong:
                    sendPing()
                case .error:
                    logger.log("[WebSocketClient handleMessage type: Error]", error: true)
            }
        } catch {
            logger.log("[WebSocketClient handleMessage] Error parsing message: \(error)", error: true)
        }
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ timeout
    private func handleTimeoutMessage(_ data: InitData) {
        self.idleTimeout = TimeInterval(data.idle_timeout)
        startPingTimer()
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    private func reconnect() {
        logger.log("[WebSocketClient reconnect] Initiating reconnect", error: false)
        Task {
            await disconnect()
            let attempts = await state.reconnectAttempts
            let delay = min(pow(Constants.initialReconnectDelayBase, Double(attempts)), maxReconnectDelay)
            try? await Task.sleep(nanoseconds: UInt64(delay * Constants.nanosecondsPerSecond))
            await MainActor.run { webSocketTask = nil }
            await connect()
        }
    }

    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    private func flushQueue() async {
        let queue = await state.flushQueue()
        logger.log("[WebSocketClient flushQueue] Queue count = \(queue.count)", error: false)

        for data in queue {
            logger.log("[WebSocketClient flushQueue] Sending message...", error: false)
            try? await sendInternal(data: data)
        }
    }

    // MARK: - Response Handling

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ WebSocket
    private func getHTTPResponse(for task: WebSocketTaskProtocol) -> HTTPURLResponse? {
        guard let urlSessionTask = task as? URLSessionWebSocketTask else { return nil }

        if let saved = delegate.getResponse(for: urlSessionTask) {
            return saved
        }

        if let direct = urlSessionTask.response as? HTTPURLResponse {
            return direct
        }

        return nil
    }
}
